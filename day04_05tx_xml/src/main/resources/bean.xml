<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 配置业务层 -->
    <bean id="accountService" class="com.service.Impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <!-- 配置账户的持久层 -->
    <bean id="accountDao" class="com.dao.Impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/test2?useUnicode=true&amp;characterEncoding=UTF-8"></property>
        <property name="username" value="root"></property>
        <property name="password" value=""></property>
    </bean>
    <!-- Spring中基于XML中的声明式事务控制配置步骤
            1. 配置事务管理器；
            2. 配置事务的通知：
                此时需要导入事务的约束 tx的名称空间和约束，同时也需要AOP的
                使用tx:advice标签配置事务通知
                    属性：
                        id：唯一标志
                        transaction-manager:提供事务管理器引用
            3. 配置AOP中的通用切入点表达式
            4. 建立事务通知和切入点表达式的关系
            5. 配置事物的属性
                在事务的通知tx:advice标签的内部
    -->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 配置事务的通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务的属性
            isolation：用于指定事务的隔离级别，默认值是Default，表示使用数据库的默认隔离级别
            read-only：用于指定事务是否只读，只有查询方法才设置为true，默认是false表示读写
            no-rollback-for：用于指定一个异常，产生时不回滚，其他异常时事务回滚。没有默认值，表示任何异常都回滚
            propagation：用于指定事务的传播行为，默认值是REQUIRED，表示一定会有事务，增删改的选择。
                        查询方法可以选择SUPPORTS。
            rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不会滚。没有默认值表示任何异常都回滚。
            timeout：用于指定事务的超时时间，默认是-1，表示永远不超时，制定了数值的话以秒为单位
        -->
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <!-- 部分通配的优先度会高于全通配 -->
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切入点表达式 -->
        <aop:pointcut id="pt1" expression="execution(* com.service.Impl.*.*(..))"/>
        <!-- 建立切入点表达式和事务通知的对应关系 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"></aop:advisor>
    </aop:config>
</beans>