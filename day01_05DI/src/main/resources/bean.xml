<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- Spring中的依赖注入
            Dependency Injection
         IOC的作用：
            削减程序间的耦合关系（依赖关系）
         依赖关系的管理：
            交由Spring框架维护
            在当前类中需要用到的其他类的对象，由Spring提供，用户只需要在配置文件中说明
         依赖关系的维护：
            称之为依赖注入；
         依赖注入可注入的三类数据：
            基本类型和String
            其他bean类型（配置文件中或注释配置的bean）
            复杂类型/集合类型
         注入的方式：
            第一种，使用构造函数提供；
            第二种，使用set方法来提供；
            第三种，使用注解提供；
    -->
    <!-- 构造函数注入（万不得已方才使用的方式）：
         使用的标签：constructor.org
         标签出现的位置：bean标签的内部
         标签中的属性
            type：指定注入数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型；
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始；
            （最常用）name：用于指定给构造函数中指定名称的参数赋值；
            =============以上三个用于指定给构造函数中那个参数赋值============================
            value：用于提供基本类型和String类型数据
            ref：指定其他bean类型，指的是在Spring的IOC核心容器中出现过的bean对象
        优势：
            获取bean对象时，注入数据是必须的操作，否则对象无法创造成功
        弊端：
            改变了bean对象的实例化方式，创建对象时，如果不用这些数据，也必须提供
    -->
    <!--<bean id="accountService" class="com.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="邵莲"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>-->
    <!-- 配置一个时间对象 -->
    <bean id="now" class="java.util.Date"></bean>
    <!-- set方法注入（更加常用的方式）
         涉及的标签：bean标签的内部
         标签的属性：
         name：用于指定注入时调用的set方法名称；
         value：用于提供基本类型和String类型数据
         ref：指定其他bean类型，指的是在Spring的IOC核心容器中出现过的bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            某个成员必须有值，获取对象时可能set方法没有执行
    -->
    <bean id="accountService" class="com.service.impl.AccountServiceImpl">
        <property name="name" value="邵莲"></property>
        <property name="age" value="20"></property>
        <property name="birthday" ref="now"></property>
    </bean>
    <!-- 复杂类型/集合类型的注入
         用于给list集合注入的标签：
            list array set
         用于给map结构注入的标签：
            map props
         结构相同，标签可以互换
    -->
    <bean id="accountService2" class="com.service.impl.AccountServiceImpl2">
         <property name="myStr">
             <array>
                 <value>aaa</value>
                 <value>bbb</value>
                 <value>ccc</value>
                 <value>ddd</value>
             </array>
         </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
                <value>ddd</value>
            </list>
        </property>
        <property name="myMap">
            <map>
                <entry key="test1" value="aaa"></entry>
                <entry key="test2">
                    <value>bbb</value>
                </entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>
</beans>